// FILE: prompt.js
// --- PLAIN TEXT EMAIL FORMATTING STANDARDS & GUIDELINES ---
//
// PURPOSE:
// This document outlines the standards for all AI-generated plain text emails
// in this project. The goal is to ensure consistency, professionalism,
// readability, and compliance. These guidelines apply to both initial cold
// emails and all subsequent follow-up communications.
//
// APPLICABILITY:
// These guidelines are primarily for prompts that instruct the AI to generate
// email content. Functions that call these prompts should be aware of these
// standards to ensure the final output aligns.
//
// I. GENERAL PRINCIPLES:
//    1. Clarity & Conciseness:
//       - Emails should be easy to understand and to the point.
//       - Avoid jargon or overly complex sentences where simpler language suffices.
//       - Aim for brevity, especially in initial outreach. Two to three short
//         paragraphs is often optimal for a first contact.
//    2. Professionalism:
//       - Maintain a respectful and professional tone at all times.
//       - Avoid slang, overly casual language, or humor that could be
//         misinterpreted.
//       - Ensure proper grammar, spelling, and punctuation.
//    3. Personalization (Contextual Relevance):
//       - Reference the prospect's first name (e.g., "${firstName}").
//       - Mention the specific service they were last associated with or that
//         is relevant to their (last) reply (e.g., "${lastService}" or based on
//         AI classification of their needs).
//       - If available and appropriate (especially for follow-ups), subtly
//         reference previous interaction points or concerns they raised. This is
//         managed by the `interactionHistorySummary` passed to some prompts.
//    4. Value Proposition:
//       - Clearly articulate the benefit to the prospect (e.g., "free audit,"
//         "solve problem X," "achieve Y outcome").
//    5. Call to Action (CTA):
//       - For initial emails, the primary CTA is usually a reply to show interest
//         or to book a meeting.
//       - For follow-ups after a positive reply, the CTA is typically to book a
//         meeting using a provided Calendly link.
//       - Make the CTA clear and easy to follow.
//    6. Human-like Quality:
//       - While AI-generated, emails should sound as if a human wrote them.
//       - Prompts should encourage variation in tone (e.g., friendly, direct,
//         professional but approachable) and phrasing to avoid robotic repetition.
//         The `INITIAL_EMAIL_PROMPT_TEMPLATE` and `FOLLOW_UP_EMAIL_PROMPT_TEMPLATE`
//         explicitly request this.
//
// II. STRUCTURE OF EMAILS:
//    1. Subject Line:
//       - Generated by the calling function (e.g., `dailyEmailBatch` or
//         `processReplies`), not typically by the core email body generation prompt.
//       - Should be concise, relevant, and engaging.
//       - Examples: "Free Audit for ${lastService}", "Re: Your Inquiry - ${identified_services}"
//    2. Salutation:
//       - Usually "Hi ${firstName},"
//    3. Opening:
//       - For initial emails: Briefly introduce yourself (if not implied by sender)
//         and the purpose of the email.
//       - For follow-ups: Acknowledge their previous reply or action.
//    4. Body:
//       - Present the main message, value proposition, and context.
//       - Break into short paragraphs for readability (1-3 sentences per paragraph).
//    5. Closing & Call to Action:
//       - Clearly state the desired next step.
//       - Example (Follow-up): "Suggest a meeting and state that you will provide the appropriate Calendly link. (The actual link will be appended later)."
//    6. Sign-off:
//       - Professional closing, e.g., "Best regards,", "Sincerely,",
//         "Looking forward to helping out,".
//       - Your Name (e.g., "${yourName}" - typically passed to the prompt or
//         hardcoded if consistent).
//    7. Footer (Compliance):
//       - All emails MUST include an unsubscribe option.
//       - Standard text: "Reply STOP to unsubscribe"
//       - This is typically appended by the prompt template itself or by the
//         email sending function. Ensure prompts like `INITIAL_EMAIL_PROMPT_TEMPLATE`
//         and `getContextualFollowUpPrompt` include this.
//
// III. SPECIFIC PROMPT REQUIREMENTS & EXAMPLES:
//    A. `getInitialEmailPrompt`:
//       - Template: `INITIAL_EMAIL_PROMPT_TEMPLATE`
//       - Key requirements: "unique 2-line email", "offer a free audit",
//         "vary tone and phrasing", "human, concise, professional", "include unsubscribe".
//    B. `getFollowUpEmailPrompt` (Standard follow-up, not contextual):
//       - Template: `FOLLOW_UP_EMAIL_PROMPT_TEMPLATE`
//       - Key requirements: Similar to initial, but as a follow-up, "remind of free audit".
//    C. `getServiceClassificationPrompt` (Generates JSON, not an email):
//       - Output is structured JSON, guiding AI on how to classify a reply.
//       - Includes fields: `identified_services`, `key_concerns`, `summary_of_need`,
//         `sentiment`, `classification_confidence`.
//       - The `summary_of_need` is key: "A specific and actionable summary of what
//         the prospect is explicitly asking for in their latest reply. Focus on key
//         questions or desired outcomes they've stated."
//       - Confidence score guidance: "Be realistic: use lower scores if the reply
//         is very short, ambiguous, or if your interpretation relies heavily on assumptions."
//    D. `getContextualFollowUpPrompt` (Generates email based on classified reply):
//       - This is the most complex email generation prompt.
//       - Must acknowledge their LATEST reply and specific concerns.
//       - Uses `interactionHistorySummary`: "If there's relevant history, subtly
//         weave it in... If their latest reply introduces a new topic clearly
//         distinct from the history, a brief acknowledgment of this shift can be
//         good..."
//       - Explains how "I" (the sender, `${yourName}`) can help.
//       - Suggests a meeting, states Calendly link will be provided.
//       - Standard requirements: concise, professional, encouraging, sign-off, unsubscribe.
//
// IV. KEY VARIABLES TO BE SUBSTITUTED INTO PROMPTS/TEMPLATES:
//    - `${firstName}`: Prospect's first name.
//    - `${lastService}`: Service mentioned in initial outreach/previous interaction.
//    - `${yourName}`: Sender's name.
//    - `${identifiedServicesText}`: Comma-separated list of services AI identified.
//    - `${keyConcernsText}`: Comma-separated list of concerns AI identified.
//    - `${summaryOfNeedText}`: AI-generated summary of prospect's need.
//    - `${relevantServiceDetails}`: AI-crafted text snippet about relevant services.
//    - `${interactionHistorySummary}`: Summary of past interactions.
//    - `${CONFIG.EMAIL_FOOTER}`: (Though often hardcoded in prompt as "Reply STOP to unsubscribe")
//
// V. REVIEW & ITERATION:
//    - Prompts should be reviewed periodically based on the quality of AI-generated
//      emails and feedback from actual prospect interactions.
//    - If AI outputs are consistently poor or miss key instructions, the
//      prompts need refinement.
//    - Pay attention to how the AI uses (or ignores) the `interactionHistorySummary`.
//    - Monitor the `classification_confidence` scores to see if they correlate
//      with the actual quality of classification and if the AI is using them
//      realistically.
//
// VI. AVOID COMMON PITFALLS:
//    - Overly long prompts can confuse the AI.
//    - Ambiguous instructions.
//    - Contradictory instructions within a single prompt.
//    - Requesting too many distinct tasks in one email generation prompt (e.g.,
//      explain 5 services in detail, book a meeting, and ask 3 questions, all
//      in a 2-line email - this is an exaggeration but illustrates the point).
//
// By adhering to these guidelines, we aim to create an effective and professional
// automated email communication system.
// -----------------------------------------------------------------------------------------

// FILE: prompt.js
// --- PLAIN TEXT EMAIL FORMATTING STANDARDS & GUIDELINES ---
//
// PURPOSE:
// This document outlines the standards for all AI-generated plain text emails
// in this project. The goal is to ensure consistency, professionalism,
// readability, and compliance. These guidelines apply to both initial cold
// emails and all subsequent follow-up communications.
//
// APPLICABILITY:
// These guidelines are primarily for prompts that instruct the AI to generate
// email content. Functions that call these prompts should be aware of these
// standards to ensure the final output aligns.
//
// I. GENERAL PRINCIPLES:
//    1. Clarity & Conciseness:
//       - Emails should be easy to understand and to the point.
//       - Avoid jargon or overly complex sentences where simpler language suffices.
//       - Aim for brevity, especially in initial outreach. Two to three short
//         paragraphs is often optimal for a first contact.
//    2. Professionalism:
//       - Maintain a respectful and professional tone at all times.
//       - Avoid slang, overly casual language, or humor that could be
//         misinterpreted.
//       - Ensure proper grammar, spelling, and punctuation.
//    3. Personalization (Contextual Relevance):
//       - Reference the prospect's first name (e.g., "${firstName}").
//       - Mention the specific service they were last associated with or that
//         is relevant to their (last) reply (e.g., "${lastService}" or based on
//         AI classification of their needs).
//       - If available and appropriate (especially for follow-ups), subtly
//         reference previous interaction points or concerns they raised. This is
//         managed by the `interactionHistorySummary` passed to some prompts.
//    4. Value Proposition:
//       - Clearly articulate the benefit to the prospect (e.g., "free audit,"
//         "solve problem X," "achieve Y outcome").
//    5. Call to Action (CTA):
//       - For initial emails, the primary CTA is usually a reply to show interest
//         or to book a meeting.
//       - For follow-ups after a positive reply, the CTA is typically to book a
//         meeting using a provided Calendly link.
//       - Make the CTA clear and easy to follow.
//    6. Human-like Quality:
//       - While AI-generated, emails should sound as if a human wrote them.
//       - Prompts should encourage variation in tone (e.g., friendly, direct,
//         professional but approachable) and phrasing to avoid robotic repetition.
//         The `INITIAL_EMAIL_PROMPT_TEMPLATE` and `FOLLOW_UP_EMAIL_PROMPT_TEMPLATE`
//         explicitly request this.
//
// II. STRUCTURE OF EMAILS:
//    1. Subject Line:
//       - Generated by the calling function (e.g., `dailyEmailBatch` or
//         `processReplies`), not typically by the core email body generation prompt.
//       - Should be concise, relevant, and engaging.
//       - Examples: "Free Audit for ${lastService}", "Re: Your Inquiry - ${identified_services}"
//    2. Salutation:
//       - Usually "Hi ${firstName},"
//    3. Opening:
//       - For initial emails: Briefly introduce yourself (if not implied by sender)
//         and the purpose of the email.
//       - For follow-ups: Acknowledge their previous reply or action.
//    4. Body:
//       - Present the main message, value proposition, and context.
//       - Break into short paragraphs for readability (1-3 sentences per paragraph).
//    5. Closing & Call to Action:
//       - Clearly state the desired next step.
//       - Example (Follow-up): "Suggest a meeting and state that you will provide the appropriate Calendly link. (The actual link will be appended later)."
//    6. Sign-off:
//       - Professional closing, e.g., "Best regards,", "Sincerely,",
//         "Looking forward to helping out,".
//       - Your Name (e.g., "${yourName}" - typically passed to the prompt or
//         hardcoded if consistent).
//    7. Footer (Compliance):
//       - All emails MUST include an unsubscribe option.
//       - Standard text: "Reply STOP to unsubscribe"
//       - This is typically appended by the prompt template itself or by the
//         email sending function. Ensure prompts like `INITIAL_EMAIL_PROMPT_TEMPLATE`
//         and `getContextualFollowUpPrompt` include this.
//
// III. SPECIFIC PROMPT REQUIREMENTS & EXAMPLES:
//    A. `getInitialEmailPrompt`:
//       - Template: `INITIAL_EMAIL_PROMPT_TEMPLATE`
//       - Key requirements: "unique 2-line email", "offer a free audit",
//         "vary tone and phrasing", "human, concise, professional", "include unsubscribe".
//    B. `getFollowUpEmailPrompt` (Standard follow-up, not contextual):
//       - Template: `FOLLOW_UP_EMAIL_PROMPT_TEMPLATE`
//       - Key requirements: Similar to initial, but as a follow-up, "remind of free audit".
//    C. `getServiceClassificationPrompt` (Generates JSON, not an email):
//       - Output is structured JSON, guiding AI on how to classify a reply.
//       - Includes fields: `identified_services`, `key_concerns`, `summary_of_need`,
//         `sentiment`, `classification_confidence`.
//       - The `summary_of_need` is key: "A specific and actionable summary of what
//         the prospect is explicitly asking for in their latest reply. Focus on key
//         questions or desired outcomes they've stated."
//       - Confidence score guidance: "Be realistic: use lower scores if the reply
//         is very short, ambiguous, or if your interpretation relies heavily on assumptions."
//    D. `getContextualFollowUpPrompt` (Generates email based on classified reply):
//       - This is the most complex email generation prompt.
//       - Must acknowledge their LATEST reply and specific concerns.
//       - Uses `interactionHistorySummary`: "If there's relevant history, subtly
//         weave it in... If their latest reply introduces a new topic clearly
//         distinct from the history, a brief acknowledgment of this shift can be
//         good..."
//       - Explains how "I" (the sender, `${yourName}`) can help.
//       - Suggests a meeting, states Calendly link will be provided.
//       - Standard requirements: concise, professional, encouraging, sign-off, unsubscribe.
//
// IV. KEY VARIABLES TO BE SUBSTITUTED INTO PROMPTS/TEMPLATES:
//    - `${firstName}`: Prospect's first name.
//    - `${lastService}`: Service mentioned in initial outreach/previous interaction.
//    - `${yourName}`: Sender's name.
//    - `${identifiedServicesText}`: Comma-separated list of services AI identified.
//    - `${keyConcernsText}`: Comma-separated list of concerns AI identified.
//    - `${summaryOfNeedText}`: AI-generated summary of prospect's need.
//    - `${relevantServiceDetails}`: AI-crafted text snippet about relevant services.
//    - `${interactionHistorySummary}`: Summary of past interactions.
//    - `${CONFIG.EMAIL_FOOTER}`: (Though often hardcoded in prompt as "Reply STOP to unsubscribe")
//
// V. REVIEW & ITERATION:
//    - Prompts should be reviewed periodically based on the quality of AI-generated
//      emails and feedback from actual prospect interactions.
//    - If AI outputs are consistently poor or miss key instructions, the
//      prompts need refinement.
//    - Pay attention to how the AI uses (or ignores) the `interactionHistorySummary`.
//    - Monitor the `classification_confidence` scores to see if they correlate
//      with the actual quality of classification and if the AI is using them
//      realistically.
//
// VI. AVOID COMMON PITFALLS:
//    - Overly long prompts can confuse the AI.
//    - Ambiguous instructions.
//    - Contradictory instructions within a single prompt.
//    - Requesting too many distinct tasks in one email generation prompt (e.g.,
//      explain 5 services in detail, book a meeting, and ask 3 questions, all
//      in a 2-line email - this is an exaggeration but illustrates the point).
//
// By adhering to these guidelines, we aim to create an effective and professional
// automated email communication system.
// -----------------------------------------------------------------------------------------

// File: prompt.gs - AI system prompts

const INITIAL_EMAIL_PROMPT_TEMPLATE = "You are an AI assistant generating a plain text email. Adhere to Plain Text Email Formatting Standards.\n\nThe email should be very brief (e.g., 2-3 short sentences). Personalize with '${firstName}'.\nGenerate a subject line like 'Offer: Free Audit for ${lastService}'. This subject should be complete. Note that the system may programmatically add a prefix (e.g., a specific project tag, or 'RE:') to the subject you generate. Do not add such prefixes yourself.\nBody: Briefly introduce the free audit for ${lastService}, highlighting its value. Maintain a human, concise, and professional tone. Use short paragraphs. Ensure the call to action is clear.\nVary tone (e.g., professional, friendly, urgent) and phrasing for randomness.\n\nConclude the email with the following structure, exactly as specified, including the blank line before the footer:\n${emailClosing}\n${signatureName}\n${signatureTitleIfAny}${signatureCompanyIfAny}\n\n${emailFooter}";

const FOLLOW_UP_EMAIL_PROMPT_TEMPLATE = "You are an AI assistant generating a plain text follow-up email. Adhere to Plain Text Email Formatting Standards.\n\nThe email should be very brief (e.g., 2-3 short sentences). Personalize with '${firstName}'.\nGenerate a subject line like 'Follow-up: Free Audit for ${lastService}'. This subject should be complete. Note that the system may programmatically add a prefix (e.g., a specific project tag, or 'RE:') to the subject you generate. Do not add such prefixes yourself.\nBody: Briefly remind ${firstName} about the free audit for ${lastService} offered previously. Maintain a human, concise, and professional tone, distinct from the initial email. Use short paragraphs. Ensure the call to action is clear.\nVary tone and phrasing.\n\nConclude the email with the following structure, exactly as specified, including the blank line before the footer:\n${emailClosing}\n${signatureName}\n${signatureTitleIfAny}${signatureCompanyIfAny}\n\n${emailFooter}";

/**
 * Generates the prompt for an initial email.
 * @param {string} firstName The first name of the lead.
 * @param {string} lastService The last service provided to the lead.
 * @return {string} The formatted prompt string.
 */
function getInitialEmailPrompt(firstName, lastService) {
  // Assuming CONFIG is globally accessible here or passed in. For this context, we'll assume global.
  const signatureTitleIfAny = CONFIG.SIGNATURE_TITLE ? CONFIG.SIGNATURE_TITLE + '\n' : '';
  const signatureCompanyIfAny = CONFIG.SIGNATURE_COMPANY ? CONFIG.SIGNATURE_COMPANY + '\n' : '';

  return INITIAL_EMAIL_PROMPT_TEMPLATE
    .replace('${firstName}', firstName)
    .replace('${lastService}', lastService)
    .replace('${subjectPrefix}', CONFIG.SUBJECT_PREFIX || '') // Ensure empty string if undefined
    .replace('${emailClosing}', CONFIG.EMAIL_CLOSING)
    .replace('${signatureName}', CONFIG.SIGNATURE_NAME)
    .replace('${signatureTitleIfAny}', signatureTitleIfAny)
    .replace('${signatureCompanyIfAny}', signatureCompanyIfAny)
    .replace('${emailFooter}', CONFIG.EMAIL_FOOTER);
}

function getServiceClassificationPrompt(replyText, leadFirstName, serviceProfile, interactionHistorySummary) { // Added interactionHistorySummary
  let servicesList = Object.keys(serviceProfile).map(serviceName => {
    // Ensure serviceProfile[serviceName] and its description exist before trying to access substring
    let descriptionSnippet = "No description available.";
    if (serviceProfile[serviceName] && serviceProfile[serviceName].description) {
      descriptionSnippet = serviceProfile[serviceName].description.substring(0, 100) + "...";
    }
    return `- ${serviceName}: ${descriptionSnippet}`;
  }).join('\n'); // Note: Use double backslash for newline in a single-line string representation if this were for a system that needs it; for Apps Script, '
' is fine.

  // Construct the history part of the prompt, only if interactionHistorySummary has content.
  const historyPromptSection = (interactionHistorySummary && interactionHistorySummary.trim() !== "") ?
`Previous interaction summary with ${leadFirstName}:
${interactionHistorySummary}
---
` : "";

  return `
${historyPromptSection}Prospect ${leadFirstName} replied with: "${replyText}"

My available services are:
${servicesList}

Based on the prospect's reply (considering any previous interactions if summarized), identify the primary service(s) they are interested in from the list above.
Also, list any specific problems or questions they mentioned in their *latest* reply.
Analyze the overall sentiment of the prospect's *latest* reply and classify it as "positive", "neutral", or "negative".
If their inquiry is unclear or doesn't match a specific service, classify services as "Generic Inquiry".

Respond in JSON format with the following structure:
{
  "identified_services": ["Service Name 1", "Service Name 2"],
  "key_concerns": ["Concern 1", "Concern 2"], // From the latest reply
  "summary_of_need": "A specific and actionable summary of what the prospect is explicitly asking for in their latest reply. Focus on key questions or desired outcomes they've stated.",
  "sentiment": "positive", // "positive", "neutral", or "negative"
  "classification_confidence": 0.85 // Your self-assessed confidence (0.0 to 1.0) in the accuracy of identified_services, key_concerns, and summary_of_need based on the reply. Be realistic: use lower scores if the reply is very short, ambiguous, or if your interpretation relies heavily on assumptions.
}
  `;
}

// Make sure CONFIG is accessible if you plan to use CONFIG.EMAIL_FOOTER directly in the prompt.
// However, it's better practice to pass it in or append it later in the email construction process.
// For this task, the prompt string will include a placeholder for the email footer
// or expect it to be appended by the calling function.
// The issue description shows "${CONFIG.EMAIL_FOOTER}" directly in the prompt.

function getContextualFollowUpPrompt(
  classifiedData,
  leadFirstName,
  yourName, // This is CONFIG.SIGNATURE_NAME
  serviceProfile,
  interactionHistorySummary,
  emailClosing, // New: CONFIG.EMAIL_CLOSING
  signatureTitle, // New: CONFIG.SIGNATURE_TITLE (could be empty)
  signatureCompany, // New: CONFIG.SIGNATURE_COMPANY (could be empty)
  emailFooter // New: CONFIG.EMAIL_FOOTER
) {
  let relevantServiceDetails = "";
  if (classifiedData && classifiedData.identified_services && classifiedData.identified_services.length > 0) {
    relevantServiceDetails = classifiedData.identified_services.map(serviceName => {
      if (serviceProfile[serviceName] && serviceProfile[serviceName].description) {
        return `Regarding ${serviceName}: ${serviceProfile[serviceName].description}`;
      }
      return ""; // Return empty string if service or its description isn't found
    }).filter(detail => detail !== "").join('\n\n'); // Ensure only non-empty details are joined, and use double newlines for separation
  }

  // Ensure classifiedData and its properties are defined before accessing them
  const identifiedServicesText = (classifiedData && classifiedData.identified_services && classifiedData.identified_services.length > 0) ? classifiedData.identified_services.join(', ') : 'services I offer';
  const keyConcernsText = (classifiedData && classifiedData.key_concerns && classifiedData.key_concerns.length > 0) ? classifiedData.key_concerns.join(', ') : 'not explicitly stated, but they replied positively';
  const summaryOfNeedText = (classifiedData && classifiedData.summary_of_need) ? classifiedData.summary_of_need : 'their general interest in my services.';

  // Construct the history part of the prompt, only if interactionHistorySummary has content.
  const historyPromptSection = (interactionHistorySummary && interactionHistorySummary.trim() !== "") ?
`My name is ${yourName}.
Here's a summary of my past interactions with ${leadFirstName}:
${interactionHistorySummary}
---
` : `My name is ${yourName}.
I previously sent a cold email to ${leadFirstName}.
`;

  // Construct the signature block for the prompt's instruction section
  let signatureBlockInstruction = `${emailClosing}\n${yourName}`;
  if (signatureTitle) {
    signatureBlockInstruction += `\n${signatureTitle}`;
  }
  if (signatureCompany) {
    signatureBlockInstruction += `\n${signatureCompany}`;
  }

  return `
You are an AI assistant generating a plain text follow-up email. Adhere to Plain Text Email Formatting Standards.
${historyPromptSection}
Based on their LATEST reply, ${leadFirstName} seems interested in: ${identifiedServicesText}.
Their specific concerns/questions from the LATEST reply are: ${keyConcernsText}.
Summary of their LATEST need: ${summaryOfNeedText}

My relevant expertise includes:
${relevantServiceDetails}

Write a helpful, expert-toned follow-up email to ${leadFirstName}.
Generate a clear and relevant subject line, for example: "Following up on your inquiry about [Service/Topic]". This subject should be complete. Note that the system may programmatically add a prefix (e.g., a specific project tag, or 'RE:') to the subject you generate. Do not add such prefixes yourself.
Use a personalized salutation (e.g., "Hi ${leadFirstName},").
Acknowledge their LATEST reply and specific concerns using short paragraphs and simple, direct language.
If there's relevant history, subtly weave it in to show you remember them (e.g., "Following up on our previous discussion about X...").
Briefly explain how I can help with the identified service(s)/concerns from their latest reply, drawing from my expertise and clearly stating the value.
Suggest a meeting and state that you will provide the appropriate Calendly link using its full URL (e.g., "You can book a time here: https://calendly.com/your-link/meeting-type").
The email should be concise, professional, encouraging, and avoid spammy language or excessive capitalization.

Conclude the email with the following structure, exactly as specified, including the blank line before the footer:
${signatureBlockInstruction}

${emailFooter}
  `;
}

/**
 * Generates the prompt for a follow-up email.
 * @param {string} firstName The first name of the lead.
 *   @param {string} lastService The last service provided to the lead.
 * @return {string} The formatted prompt string.
 */
function getFollowUpEmailPrompt(firstName, lastService) {
  // Assuming CONFIG is globally accessible here or passed in. For this context, we'll assume global.
  const signatureTitleIfAny = CONFIG.SIGNATURE_TITLE ? CONFIG.SIGNATURE_TITLE + '\n' : '';
  const signatureCompanyIfAny = CONFIG.SIGNATURE_COMPANY ? CONFIG.SIGNATURE_COMPANY + '\n' : '';

  return FOLLOW_UP_EMAIL_PROMPT_TEMPLATE
    .replace('${firstName}', firstName)
    .replace('${lastService}', lastService)
    .replace('${subjectPrefix}', CONFIG.SUBJECT_PREFIX || '') // Ensure empty string if undefined
    .replace('${emailClosing}', CONFIG.EMAIL_CLOSING)
    .replace('${signatureName}', CONFIG.SIGNATURE_NAME)
    .replace('${signatureTitleIfAny}', signatureTitleIfAny)
    .replace('${signatureCompanyIfAny}', signatureCompanyIfAny)
    .replace('${emailFooter}', CONFIG.EMAIL_FOOTER);
}
